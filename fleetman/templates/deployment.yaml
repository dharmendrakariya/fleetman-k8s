apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "fleetman.fullname" . }}
  labels:
    {{- include "fleetman.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "fleetman.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "fleetman.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "fleetman.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      volumes:
      - name: state-file
        configMap:
          name: {{ include "fleetman.fullname" . }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
          - name: USER_UID
            value: "{{ .Values.UserUID }}"
          - name: USER_GID
            value: "{{ .Values.UserGID }}"
          - name: KEY1
            valueFrom:
              secretKeyRef:
                name: {{ include "fleetman.fullname" . }}
                key: KEY1
          - name: KEY2
            valueFrom:
              secretKeyRef:
                name: {{ include "fleetman.fullname" . }}
                key: KEY2
          - name: KEY3
            valueFrom:
              secretKeyRef:
                name: {{ include "fleetman.fullname" . }}
                key: KEY3
          volumeMounts:
          - name: state-file
            mountPath: /root/state.csv
            subPath: state.csv
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          # livenessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          # readinessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
